- name: Clear local development environment
  hosts: all
  become: false
  gather_facts: false
  tasks:
    - name: 実行中のマシン情報を取得
      ansible.builtin.setup:
        gather_subset:
          - system
      become: true
    - name: データベース接続設定ファイルの存在確認
      ansible.builtin.stat:
        path: "{{ base_dir }}/config/database.yml"
      register: database_setting_stat_result
    - name: データベースをリセット
      when:
        - ansible_facts.system == 'Linux'
        - database_setting_stat_result.stat.exists
      block:
        - name: データベースを削除
          environment:
            DISABLE_DATABASE_ENVIRONMENT_CHECK: 1
            RAILS_NEV: "{{ item }}"
          ansible.builtin.command:
            cmd: bundle exec rake db:drop
            chdir: "{{ base_dir }}"
          loop:
            - development
            - test
            - production
        - name: データベースを作成
          environment:
            RAILS_NEV: "{{ item }}"
          ansible.builtin.command:
            cmd: bundle exec rake db:create
            chdir: "{{ base_dir }}"
          loop:
            - development
            - test
            - production
      tags: db_clear
    - name: themesディレクトリの存在確認
      ansible.builtin.stat:
        path: "{{ base_dir }}/themes"
      register: themes_dir_stat_result
    - name: 削除対象のテーマ抽出用の変数を設定
      ansible.builtin.set_fact:
        redmine_theme_dir: "{{ base_dir }}/{{ themes_dir_stat_result.stat.exists | ternary('themes', 'public/themes') }}"
        theme_exclude_patterns: "{{ themes_dir_stat_result.stat.exists | ternary(None, ['alternate', 'classic']) }}"
    - name: インストール済みのテーマを抽出
      ansible.builtin.find:
        paths: "{{ redmine_theme_dir }}"
        file_type: directory
        excludes: "{{ theme_exclude_patterns }}"
      register: installed_theme_result
    - name: インストール済みのテーマを削除
      ansible.builtin.file:
        path: "{{ installed_theme.path }}"
        state: absent
      loop: "{{ installed_theme_result.files }}"
      loop_control:
        loop_var: installed_theme
        label: "{{ installed_theme.path | basename }}"
    - name: インストール済みのプラグインを抽出
      ansible.builtin.find:
        paths:
          - "{{ base_dir }}/plugins/"
        file_type: directory
      register: installed_plugin_result
    - name: インストール済みプラグインを削除
      ansible.builtin.file:
        path: "{{ installed_plugin.path }}"
        state: absent
      loop: "{{ installed_plugin_result.files }}"
      loop_control:
        loop_var: installed_plugin
        label: "{{ installed_plugin.path | basename }}"
    - name: Git管理下から除外するファイルの設定を追加
      ansible.builtin.blockinfile:
        path: "{{ base_dir }}/.gitignore"
        state: absent
      register: gitignore_result
    - name: .gitignoreの変更変更を無視する設定を解除
      ansible.builtin.command:
        cmd: git update-index --no-assume-unchanged {{ item }}
        chdir: "{{ base_dir }}"
      loop: "{{ git_assume_unchanged_files | default(['.gitignore']) }}"
    # - name: Git管理下のファイルの変更を(ハード)リセット
    #   ansible.builtin.command:
    #     cmd: git reset --hard
    #     chdir: "{{ base_dir }}"
    - name: Redmineの設定ファイルを削除
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - "{{ base_dir }}/.editorconfig"
        - "{{ base_dir }}/.ruby-lsp"
        - "{{ base_dir }}/.env"
        - "{{ base_dir }}/.envrc"
        - "{{ base_dir }}/.erdconfig"
        - "{{ base_dir }}/.tbls.yml"
        - "{{ base_dir }}/mkdocs.yml"
        - "{{ base_dir }}/Gemfile.local"
        - "{{ base_dir }}/Gemfile.lock"
        - "{{ base_dir }}/.yardoc"
        - "{{ base_dir }}/.bundle"
        - "{{ base_dir }}/config/additional_environment.rb"
        - "{{ base_dir }}/config/configuration.yml"
        - "{{ base_dir }}/config/database.yml"
        - "{{ base_dir }}/config/initializers/secret_token.rb"
        - "{{ base_dir }}/db/schema.rb"
        - "{{ base_dir }}/lib/tasks/import.rake"
        - "{{ base_dir }}/lib/tasks/export.rake"
        - "{{ base_dir }}/node_modules"
        - "{{ base_dir }}/package-lock.json"
        - "{{ base_dir }}/pnpm-lock.yaml"
    - name: 生成済みのドキュメントを抽出
      ansible.builtin.find:
        paths:
          - "{{ base_dir }}/doc"
        pattern:
          - "*.md"
      register: geneted_docs
    - name: 自動生成した各種ドキュメントを削除
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop: "{{ (geneted_docs.files | map(attribute='path')) + append_removed_paths }}"
      vars:
        append_removed_paths:
          - "{{ base_dir }}/doc/app"
          - "{{ base_dir }}/doc/schema"
    - name: VSCodeの設定を削除
      ansible.builtin.file:
        path: "{{ base_dir }}/.vscode"
        state: absent
